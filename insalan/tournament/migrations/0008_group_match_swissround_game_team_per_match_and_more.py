# Generated by Django 4.1.12 on 2024-02-17 00:43

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('tournament', '0007_tournamentmailer_mail_tournamentmailer_number'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Nom de la poule')),
                ('round_count', models.IntegerField(default=1, verbose_name='Nombre de rounds')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament', verbose_name='Tournoi')),
            ],
            options={
                'verbose_name': 'Poule',
                'verbose_name_plural': 'Poules',
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField(verbose_name='Numéro du round')),
                ('index_in_round', models.IntegerField(verbose_name='Indexe du match dans un round')),
                ('status', models.CharField(choices=[('SCHEDULED', 'Prévu'), ('ONGOING', 'En cours'), ('COMPLETED', 'Terminé')], default='SCHEDULED', max_length=10, verbose_name='Status du match')),
                ('bo_type', models.IntegerField(choices=[(1, 'Série de 1'), (3, 'Série de 3'), (5, 'Série de 5'), (7, 'Série de 7'), (0, 'Classement')], default=1, verbose_name='Type de série')),
                ('times', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), blank=True, default=list, size=None, verbose_name='Liste des durées des parties du match')),
            ],
        ),
        migrations.CreateModel(
            name='SwissRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_score', models.IntegerField(verbose_name='Score minimal pour la qualification')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament', verbose_name='Tournoi')),
            ],
            options={
                'verbose_name': 'Ronde Suisse',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='team_per_match',
            field=models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2)], verbose_name="Nombre maximum d'équipes par match"),
        ),
        migrations.AlterField(
            model_name='game',
            name='name',
            field=models.CharField(max_length=40, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Nom du jeu'),
        ),
        migrations.AlterField(
            model_name='game',
            name='players_per_team',
            field=models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Nombre de joueurs par équipe'),
        ),
        migrations.AlterField(
            model_name='game',
            name='substitute_players_per_team',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Nombre de remplaçants par équipe'),
        ),
        migrations.CreateModel(
            name='GroupMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.match')),
            ],
            options={
                'verbose_name': 'Match de poule',
                'verbose_name_plural': 'Matchs de poule',
            },
            bases=('tournament.match',),
        ),
        migrations.CreateModel(
            name='KnockoutMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.match')),
                ('bracket_set', models.CharField(choices=[('WINNER', 'Gagnant'), ('LOOSER', 'Perdant')], default='WINNER', max_length=10, verbose_name='Type de tableau, gagnant ou perdant')),
            ],
            options={
                'verbose_name': "Match d'arbre",
                'verbose_name_plural': "Matchs d'arbre",
            },
            bases=('tournament.match',),
        ),
        migrations.CreateModel(
            name='SwissSeeding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seeding', models.IntegerField(blank=True, null=True)),
                ('swiss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.swissround')),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
            ],
        ),
        migrations.CreateModel(
            name='Seeding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seeding', models.IntegerField()),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.group')),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tournament.team')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=0, verbose_name='Score')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.match', verbose_name='Match')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.team', verbose_name='Équipe')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(through='tournament.Score', to='tournament.team', verbose_name='Liste des équipes'),
        ),
        migrations.CreateModel(
            name='Bracket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name="Nom de l'arbre")),
                ('bracket_type', models.CharField(choices=[('SINGLE', 'Simple élimination'), ('DOUBLE', 'Double élimination')], default='SINGLE', max_length=10)),
                ('team_count', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(2)], verbose_name="Nombre d'équipes")),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.tournament', verbose_name='Tournoi')),
            ],
            options={
                'verbose_name': 'Arbre de tournoi',
                'verbose_name_plural': 'Arbres de tournoi',
            },
        ),
        migrations.CreateModel(
            name='SwissMatch',
            fields=[
                ('match_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tournament.match')),
                ('swiss', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.swissround')),
            ],
            options={
                'verbose_name': 'Match de ronde suisse',
                'verbose_name_plural': 'Matchs de ronde suisse',
            },
            bases=('tournament.match',),
        ),
        migrations.AddConstraint(
            model_name='score',
            constraint=models.UniqueConstraint(fields=('team', 'match'), name='no_duplicate_team_in_a_match'),
        ),
        migrations.AddField(
            model_name='knockoutmatch',
            name='bracket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.bracket', verbose_name='Arbre de tournoi'),
        ),
        migrations.AddField(
            model_name='groupmatch',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tournament.group', verbose_name='Poule'),
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('name', 'tournament'), name='unique_group_name_in_same_tournament'),
        ),
    ]
